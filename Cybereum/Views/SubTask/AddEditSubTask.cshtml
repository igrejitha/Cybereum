@model Cybereum.Models.ProjectSubTask

@{
    ViewBag.Title = "Add/Edit SubTask";
}

<style type="text/css">
    .error {
        color: red;
        display: none;
    }
</style>

<div class="row">
    <div class="col-xl-12 col-lg-12">
        <div class="card">
            <div class="card-header">
                <h4 class="card-title">Add/Edit Sub-Task</h4>
            </div>
            <div class="card-body">
                <div class="basic-form">
                    @using (Html.BeginForm("AddEditSubTask", "SubTask", FormMethod.Post, new { enctype = "multipart/form-data" }))
                    {
                        @Html.AntiForgeryToken()

                        <span class="text-danger" style="align-items:center;">
                            @ViewBag.Message
                            @Html.HiddenFor(model => model.subtaskid, htmlAttributes: new { @class = "control-label col-md-2" })
                            @Html.HiddenFor(model => model.taskid)
                            @Html.HiddenFor(model => model.taskname)
                            @Html.HiddenFor(model => model.createdby)
                            @Html.HiddenFor(model => model.createdon)
                        </span>
                        <div class="form-row">
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.subtaskname, "Sub-Task Name", htmlAttributes: new { @class = "" })
                                @*<div class="col-md-10">*@
                                @Html.EditorFor(model => model.subtaskname, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
                                @Html.ValidationMessageFor(model => model.subtaskname, "", new { @class = "text-danger" })
                                @*</div>*@
                            </div>
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.startdate, "Start Date", htmlAttributes: new { @class = "" })
                                @Html.TextBoxFor(model => model.startdate, new { @type = "date", @class = "form-control datepicker", @Value = Model.startdate.ToString("yyyy-MM-dd") })
                                @Html.ValidationMessageFor(model => model.startdate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.durations, "Duration", htmlAttributes: new { @class = "" })
                                @Html.TextBoxFor(model => model.durations, new { @class = "form-control", autocomplete = "off" })
                                @Html.ValidationMessageFor(model => model.durations, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.enddate, "End Date", htmlAttributes: new { @class = "" })
                                @Html.TextBoxFor(model => model.enddate, new { @type = "date", @class = "form-control datepicker", @Value = Model.enddate.ToString("yyyy-MM-dd"), @disabled = "disabled" })
                                @Html.ValidationMessageFor(model => model.enddate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.taskstatus, "Status", htmlAttributes: new { @class = "" })
                                @Html.DropDownList("taskstatus", null, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.taskstatus, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.tasktype, "Task Type", htmlAttributes: new { @class = "" })
                                @Html.DropDownList("tasktype", null, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.tasktype, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.assignedto, "Assigned To", htmlAttributes: new { @class = "" })
                                @Html.DropDownList("assignedto", null, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.assignedto, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row" style="padding-top: 30px;">
                            <div class="col-6">
                                <h4>
                                    @Html.ActionLink("Back to List", "List", new
                                    {
                                        // routeValues
                                        taskid = ViewBag.taskid,
                                        activityid = ViewBag.activityid,
                                        projectid = ViewBag.projectid
                                    })
                                </h4>
                            </div>
                            <div class="col-6">
                                <input type="submit" name="btnSubmit" value="Save" class="btn btn" style="background-color: #0D2136; color: white;" />
                            </div>

                        </div>
                                @*</div>*@
                    }

                </div>
            </div>
        </div>
    </div>
</div>

@Scripts.Render("~/bundles/jquery")
<script type="text/javascript">
    $(document).ajaxSend(function () {
        //$("#overlay").fadeIn(300);
    });


    $(document).ready(function () {
        debugger;

        $('#durations').change(function () {
            var recordId = this.value;
            var startdate = $("#startdate").val();
            $.getJSON("/SubTask/GetEnddate",
                {
                    startDate: startdate,
                    id: recordId
                },
                function (data) {
                    debugger;
                    var date = new Date(parseInt(data.substr(6)));
                    var month = ("0" + (date.getMonth() + 1)).slice(-2);
                    date = date.getFullYear() + '-' + month + '-' + ("0" + date.getDate()).slice(-2);
                    $('#enddate').val(date);
                });
        });

        $(function () {
            //$("#startdate").datepicker();
            $("#startdate").on('change', function () {
                debugger;
                var startdate = $("#startdate").val();
                var date = $("#enddate").val();
                if (date != "") {
                    if (date < startdate) {
                        alert('End date must be greater than Start date');
                        $(this).val('');
                    }
                }
            });
        });

        $(function () {
            //$("#enddate").datepicker();
            $("#enddate").on('change', function () {
                debugger;
                var date = $("#enddate").val();
                var startdate = $("#startdate").val();
                if (date != "") {
                    if (date < startdate) {
                        alert('End date must be greater than Start date');
                        $(this).val('');
                    }
                }
            });
        });


        //$('#DataTable').DataTable();
        $('#checkBoxAll').click(function () {
            if ($(this).is(":checked")) {
                $(".chkCheckBoxId").prop("checked", true)
            }
            else {
                $(".chkCheckBoxId").prop("checked", false)
            }
        });

    });
</script>
