@*@model Cybereum.Models.ProjectActivity*@
<<<<<<< Updated upstream
<<<<<<< Updated upstream
<<<<<<< Updated upstream
=======
@*@using DlhSoft.Web.Mvc;*@
>>>>>>> Stashed changes
=======
@*@using DlhSoft.Web.Mvc;*@
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
@{
    ViewBag.Title = "GANTT Chart";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<<<<<<< Updated upstream
@*<html>
    <head>*@
@*<script src="https://cdn.anychart.com/releases/8.6.0/js/anychart-core.min.js"> </script>
<<<<<<< Updated upstream
<script src="https://cdn.anychart.com/releases/8.6.0/js/anychart-gantt.min.js"></script>*@
=======
    <script src="https://cdn.anychart.com/releases/8.6.0/js/anychart-gantt.min.js"></script>*@
>>>>>>> Stashed changes
<script src="https://cdn.anychart.com/releases/8.11.0/js/anychart-core.min.js" type="text/javascript"></script>
<script src="https://cdn.anychart.com/releases/8.11.0/js/anychart-gantt.min.js" type="text/javascript"></script>
@*</head>
    <body>*@
=======

@*<script src="https://cdn.anychart.com/releases/8.6.0/js/anychart-core.min.js"> </script>
    <script src="https://cdn.anychart.com/releases/8.6.0/js/anychart-gantt.min.js"></script>*@
<script src="https://cdn.anychart.com/releases/8.11.0/js/anychart-core.min.js" type="text/javascript"></script>
<script src="https://cdn.anychart.com/releases/8.11.0/js/anychart-gantt.min.js" type="text/javascript"></script>

>>>>>>> Stashed changes
<div class="form-horizontal">
    <h4>GANTT Chart</h4>
    <hr />
</div>
<div class="col-6">
    <a href="@Url.Action("List", "Project")"><h4>Back To List</h4></a>
</div>
<div id="container" style="height:450px"> </div>
<br />
<<<<<<< Updated upstream
<<<<<<< Updated upstream
<<<<<<< Updated upstream
=======
@*@(Html.GanttChartView(component => {
    // Settings.
    component.Columns[(int)ColumnType.Content].Header = "Activity";
    // CSS classes.
    component.StandardBarCssClass = "dsgc-standard-bar";
    component.StandardCompletedBarCssClass = "dsgc-standard-completed-bar";
    // Item change action set up (post).
    component.ItemChangeAction = "UpdateGanttChartItem";    
}))*@
>>>>>>> Stashed changes
@*<div class="row">
    <div class="col-xl-12 col-lg-12">
        <div class="card">
            <div class="card-header">
                <h4 class="card-title">Add Activity</h4>
            </div>
            <div class="card-body">
                <div class="basic-form">
                    @using (Html.BeginForm("GANTTChart", "Home", FormMethod.Post, new { enctype = "multipart/form-data" }))
                    {
                        @Html.AntiForgeryToken()                        
                        <span class="text-danger" style="align-items:center;">
                            @ViewBag.Message
                            @Html.HiddenFor(model => model.id)
                            @Html.HiddenFor(model => model.projectid)                            
                            @Html.HiddenFor(model => model.createdon)
                        </span>
                        <div class="form-row">
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.activityname, "Activity Name", htmlAttributes: new { @class = "" })
                                @Html.EditorFor(model => model.activityname, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
                                @Html.ValidationMessageFor(model => model.activityname, "", new { @class = "text-danger" })
=======
@*@(Html.GanttChartView(component => {
        // Settings.
        component.Columns[(int)ColumnType.Content].Header = "Activity";
        // CSS classes.
        component.StandardBarCssClass = "dsgc-standard-bar";
        component.StandardCompletedBarCssClass = "dsgc-standard-completed-bar";
        // Item change action set up (post).
        component.ItemChangeAction = "UpdateGanttChartItem";
    }))*@
=======
>>>>>>> Stashed changes
@*<div class="row">
        <div class="col-xl-12 col-lg-12">
            <div class="card">
                <div class="card-header">
                    <h4 class="card-title">Add Activity</h4>
                </div>
                <div class="card-body">
                    <div class="basic-form">
                        @using (Html.BeginForm("GANTTChart", "Home", FormMethod.Post, new { enctype = "multipart/form-data" }))
                        {
                            @Html.AntiForgeryToken()
                            <span class="text-danger" style="align-items:center;">
                                @ViewBag.Message
                                @Html.HiddenFor(model => model.id)
                                @Html.HiddenFor(model => model.projectid)
                                @Html.HiddenFor(model => model.createdon)
                            </span>
                            <div class="form-row">
                                <div class="form-group col-md-6">
                                    @Html.LabelFor(model => model.activityname, "Activity Name", htmlAttributes: new { @class = "" })
                                    @Html.EditorFor(model => model.activityname, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
                                    @Html.ValidationMessageFor(model => model.activityname, "", new { @class = "text-danger" })
                                </div>
                                <div class="form-group col-md-6">
                                    @Html.LabelFor(model => model.startdate, "Start Date", htmlAttributes: new { @class = "" })
<<<<<<< Updated upstream

                                    @Html.TextBoxFor(model => model.startdate, new { @type = "date", @class = "form-control datepicker", @Value = Model.startdate.ToString("yyyy-MM-dd") })
                                    @Html.ValidationMessageFor(model => model.startdate, "", new { @class = "text-danger" })

                                </div>
>>>>>>> Stashed changes
                            </div>
                            <div class="form-row">
                                <div class="form-group col-md-6">
                                    @Html.LabelFor(model => model.enddate, "End Date", htmlAttributes: new { @class = "" })

=======

                                    @Html.TextBoxFor(model => model.startdate, new { @type = "date", @class = "form-control datepicker", @Value = Model.startdate.ToString("yyyy-MM-dd") })
                                    @Html.ValidationMessageFor(model => model.startdate, "", new { @class = "text-danger" })

                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-group col-md-6">
                                    @Html.LabelFor(model => model.enddate, "End Date", htmlAttributes: new { @class = "" })

>>>>>>> Stashed changes
                                    @Html.TextBoxFor(model => model.enddate, new { @type = "date", @class = "form-control datepicker", @Value = Model.enddate.ToString("yyyy-MM-dd") })
                                    @Html.ValidationMessageFor(model => model.enddate, "", new { @class = "text-danger" })

                                </div>
                                <div class="form-group col-md-6">
                                    @Html.LabelFor(model => model.ismilestone, "Is Milestone?", htmlAttributes: new { @class = "" })

                                    @Html.CheckBoxFor(model => model.ismilestone)

                                </div>
                            </div>
                            <div class="row" style="padding-top: 30px;">
                                <div class="col-6">
                                </div>
                                <div class="col-6">
                                    <input type="submit" name="btnSubmit" value="Save" class="btn btn" style="background-color: #0D2136; color: white;" />
                                </div>

                            </div>
<<<<<<< Updated upstream
<<<<<<< Updated upstream
                        </div>
                        <div class="form-row">
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.enddate, "End Date", htmlAttributes: new { @class = "" })

                                @Html.TextBoxFor(model => model.enddate, new { @type = "date", @class = "form-control datepicker", @Value = Model.enddate.ToString("yyyy-MM-dd") })
                                @Html.ValidationMessageFor(model => model.enddate, "", new { @class = "text-danger" })

                            </div>
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.ismilestone, "Is Milestone?", htmlAttributes: new { @class = "" })

                                @Html.CheckBoxFor(model => model.ismilestone)

                            </div>
                        </div>
                        <div class="row" style="padding-top: 30px;">
                            <div class="col-6">                               
                            </div>
                            <div class="col-6">                                
                                <input type="submit" name="btnSubmit" value="Save" class="btn btn" style="background-color: #0D2136; color: white;" />
                            </div>

                        </div>                        
                    }
                </div>
            </div>
        </div>
    </div>
</div>*@
=======
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>*@
>>>>>>> Stashed changes
=======
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>*@
>>>>>>> Stashed changes

@*<div>
        @{Html.RenderAction("Create", "Activity",new { projectid=@ViewBag.projectid });}
    </div>*@
@Scripts.Render("~/bundles/jquery")
<script type="text/javascript">
    $(document).ajaxSend(function () {
        //$("#overlay").fadeIn(300);
    });


    $(document).ready(function () {
        debugger;

        $('#container').contextmenu(function() {
            //alert("Right click");
        });

        $(function () {
            //$("#startdate").datepicker();
            $("#startdate").on('change', function () {
                debugger;
                var startdate = $("#startdate").val();
                var date = $("#enddate").val();
                if (date != "") {
                    if (date < startdate) {
                        alert('End date must be greater than Start date');
                        $(this).val('');
                    }
                }
            });
        });


        $(function () {
            $("#enddate").on('change', function () {
                debugger;
                var date = $("#enddate").val();
                var startdate = $("#startdate").val();
                if (date != "") {
                    if (date < startdate) {
                        alert('End date must be greater than Start date');
                        $(this).val('');
                    }
                }
            });
        });
    });
</script>
<script>
    anychart.onDocumentReady(function () {
        // create data
        debugger;
        var projectid = "@ViewBag.projectid";
        $.ajax({
            type: 'GET',
            url: '@Url.Action("getgannchart")?projectid=' + projectid,
            datatype: JSON,
            data: {
            },
            contentType: "text/json",
            success: function (data) {
                debugger;
                data = $.parseJSON(data);
                // set the input date/time format
                anychart.format.inputDateTimeFormat("yyyy-MM-dd");
                // create a data tree
                var treeData = anychart.data.tree(data, "as-tree");

                // create a chart
                var chart = anychart.ganttProject();

                var header = chart.getTimeline().header();
                header.level(0).format("{%tickValue}{dateTimeFormat:dd MMM}");
                header.level(1).format("{%value}");
                header.level(2).format("{%value}-{%endValue}");                

                // disable the first data grid column
                chart.dataGrid().column(0).enabled(false);
                chart.dataGrid().column(1).width(300);

                //var header = chart.getTimeline().header();
                //header.level(0).format(function () {
                //    var duration = (this.end - this.tickValue) / 1000 / 3600 / 24;
                //    return this.value + ": " + duration + " days"
                //});

                // set the data
                chart.data(treeData);

                //// set the position of the splitter
                //chart.splitterPosition("25%");
                var max = null;
                var min = null;

                for (var i = 0; i < data.length; i++) {
                    var current = data[i];
                    if (max === null || current.source > max.source) {
                        max = current;
                    }
                    if (min === null || current.source < min.source) {
                        min = current;
                    }
                }
                var minDate = new Date(min.actualStart);
                minDate.setDate(minDate.getDate() - 5);
                var maxDate = new Date(max.actualEnd);
                maxDate.setDate(maxDate.getDate() + 5);
                //chart.getTimeline().scale().minimum("2023-05-01");
                //chart.getTimeline().scale().maximum("2023-06-30");
                chart.getTimeline().scale().minimum(minDate);
                chart.getTimeline().scale().maximum(maxDate);

                //// configure the scale
                //chart.getTimeline().scale().maximum(Date.UTC(2023, 06, 30));
                // set the container id
                chart.container("container");
                // initiate drawing the chart
                chart.draw();
                // fit elements to the width of the timeline
                chart.fitAll();
                //chart.fitToTask("1");
<<<<<<< Updated upstream
<<<<<<< Updated upstream
                //chart.zoomTo("week", 2, "first-date");
=======
                //var tl = chart.getTimeline();
                //tl.textMarker(0).value(anychart.enums.GanttDateTimeMarkers.START - 1*day);
                //chart.zoomTo("week", 2, "first-date");

=======
                //chart.zoomIn();
                //var tl = chart.getTimeline();                
                //tl.textMarker(0).value(anychart.enums.GanttDateTimeMarkers.START - 5*day);
                //tl.rangeMarker(1).from(anychart.enums.GanttDateTimeMarkers.START - 7*day).to(anychart.enums.GanttDateTimeMarkers.END);
                //chart.zoomTo("month", 2, "last-visible-date");
                //chart.zoomTo(Date.UTC(2023, 5, 01), Date.UTC(2023, 6, 30));
                
                //// Set zoom levels.
                //scale.zoomLevels([
                //    [
                //        {unit: 'day', count: 3},
                //        {unit: 'month', count: 1},
                //        {unit: 'year', count: 1}
                //    ]
                //]);

                ////zooming feature
                //var zoomingCoef = 1;
                //var isPreviousNegative = true;
  
                ////mouse wheel listener
                //$("#container").on('wheel', function(e){
                //    e.preventDefault();
                //    e.stopImmediatePropagation();
     
                //    //define the zoomingCoef
                //    if(e.originalEvent.deltaY > 0 ^ isPreviousNegative) {
                //        zoomingCoef -= e.originalEvent.deltaY/10;
                //    } else {
                //        zoomingCoef =1;
                //    }
   
                //    //zoomIn or zoomOut
                //    if(e.originalEvent.deltaY < 0) {
                //        chart.zoomIn(zoomingCoef);
                //        isPreviousNegative = true;
                //    }	else {
                //        chart.zoomOut(zoomingCoef);
                //        isPreviousNegative = false;
                //    }
                //});
                
>>>>>>> Stashed changes
                /* listen to the rowClick event
                    and update the chart title */
                var timer = null
                chart.listen("rowClick", function (e) {
                    debugger;                    
                    clearTimeout(timer);
                    timer = setTimeout(function(){
                        //Edit existing activity
                        var roleid = @Session["RoleId"];
                        var taskid = e.item.get("taskid");
                        var projectid = "@ViewBag.projectid";
                        var link = '@Html.Raw(@Url.Action("Addrecord", "Activity", new { id = "id"}))'.replace('id', taskid);
                        if (roleid === 2) {
                            window.open(link, '_blank');
                        }
                        return false;
                    }, 300)
                });
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes

                /* listen to the rowDblClick event
                    and update the chart title */
                chart.listen("rowDblClick", function (e) {
<<<<<<< Updated upstream
<<<<<<< Updated upstream
<<<<<<< Updated upstream
=======
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
                    debugger;
                    clearTimeout(timer);
                    var roleid = @Session["RoleId"];
                    var taskid = e.item.get("taskid");
                    var projectid = "@ViewBag.projectid";
<<<<<<< Updated upstream
<<<<<<< Updated upstream
                    var link = '@Html.Raw(@Url.Action("Create", "Activity", new { projectid = "rowid", activityid = "taskid"}))'.replace('rowid', projectid).replace('taskid', taskid);                    
                    window.open(link, '_blank');
                    return false;
                });
=======
                    debugger;                    
                    var taskid = e.item.get("taskid");
                    var projectid = "@ViewBag.projectid";
                    var link = '@Html.Raw(@Url.Action("Create", "Activity", new { projectid = "rowid", activityid = "taskid"}))'.replace('rowid', projectid).replace('taskid', taskid);
                    window.open(link, '_blank');
                    return false;
                });

                /* listen to the rowClick event
                    and update the chart title */
                chart.listen("rowClick", function (e) {
                    debugger;
                    //New activity
                    @*var taskid = e.item.get("taskid");
                    var projectid = "@ViewBag.projectid";
                    var link = '@Html.Raw(@Url.Action("Create", "Activity", new { projectid = "rowid", activityid = "taskid"}))'.replace('rowid', projectid).replace('taskid', taskid);
                    window.open(link, '_blank');*@

                    //Edit existing activity
                    var taskid = e.item.get("taskid");
                    var projectid = "@ViewBag.projectid";
                    var link = '@Html.Raw(@Url.Action("Addrecord", "Activity", new { id = "id"}))'.replace('id', taskid);
                    window.open(link, '_blank');
                    return false;
                });
>>>>>>> Stashed changes
=======
                    var link = '@Html.Raw(@Url.Action("Create", "Activity", new { projectid = "rowid", activityid = "taskid"}))'.replace('rowid', projectid).replace('taskid', taskid);
                    if (roleid === 2) {
                        window.open(link, '_blank');
                    }
                    return false;
                });
>>>>>>> Stashed changes
=======
                    var link = '@Html.Raw(@Url.Action("Create", "Activity", new { projectid = "rowid", activityid = "taskid"}))'.replace('rowid', projectid).replace('taskid', taskid);
                    if (roleid === 2) {
                        window.open(link, '_blank');
                    }
                    return false;
                });
>>>>>>> Stashed changes

                //chart.listen("contextmenu", function(e) {
                //    debugger;                    
                //    var taskid = e.item.get("taskid");
                //});
            }
        });

    });

</script>
@*</body>
    </html>*@