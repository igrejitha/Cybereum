@{
    ViewBag.Title = "GanttChart";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script src="~/codebase/dhtmlxgantt.js?v=8.0.4"></script>
<link rel="stylesheet" href="~/codebase/dhtmlxgantt.css?v=8.0.4">
<h2><img src="~/images/cyber/Blue_Logo.png" alt="" width="3%"> GanttChart</h2>

<style type="text/css">
    .error {
        color: red;
        display: none;
    }

    #divLoader {
        position: fixed;
        display: block;
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
        text-align: center;
        opacity: 0.7;
        background-color: #fff;
        z-index: 99;
    }

    #loading-image {
        position: absolute;
        top: 50%;
        left: 50%;
        z-index: 100;
    }

    .nested_task .gantt_add {
        display: none !important;
    }

    .nested_task .gantt_add {
        display: none !important;
    }

    .hide-link-point .gantt_link_control {
        display: none;
    }

    .gantt_task_progress {
        text-align: left;
        color: white;
        font-weight: bold;
        overflow: visible !important;
    }

    .hide_progress_drag .gantt_task_progress_drag {
        display: none !important;
    }

    .circle_task .gantt_link_control,
    .circle_task .gantt_task_progress_drag {
        display: none;
    }

    .gantt_grid_scale, .gantt_task_scale, .gantt_task_vscroll, .gantt_grid, .gantt_grid_scale, .gantt_grid_head_cell, .gantt_grid_data, .gantt_row.odd, .gantt_row, .gantt_row.gantt_row_task, .gantt_row.gantt_row_project, .gantt_row.gantt_row_milestone, gantt_cell.gantt_cell_tree, .gantt_tree_indent, .gantt_tree_icon.gantt_close, .gantt_tree_icon.gantt_open, .gantt_tree_content, gantt_cell, .gantt_tree_content, .gantt_task_scale, .gantt_scale_line, .gantt_scale_cell, .gantt_task_cell, .gantt_data_area {
        background-color: #08375e;
        color: #a6a6a6;
    }

        .gantt_grid_data .gantt_row.odd:hover, .gantt_grid_data .gantt_row:hover {
            background-color: #08375e;
        }
</style>
<div id="divLoader" style="display:none;">
    <img id="loading-image" src="~/images/Spinner.gif" alt="Loader" />
</div>
<div class="main-content">

    <div class="page-content">
        <div class="container-fluid">
            @*<div id="ganttContainer" style="width: 100%; height: 100vh;"></div>*@
            <div class="row">
                <div class="col-12 px-4">
                    <div class="card">
                        <div class="card-body">
                            <h4 class="header-title mb-4">Gantt Chart</h4>
                            <div style="height: 450px;background: #08375e ;" id="ganttContainer"></div>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Gantt Chart -->
<script>
    (function () {
        // add month scale
        var projectid = "@ViewBag.projectid";
        gantt.config.scale_unit = "month";
        gantt.config.date_scale = "%F, %Y";
        gantt.config.step = 1;
        gantt.templates.date_scale = function (date) {
            var dateToStr = gantt.date.date_to_str("%d %M");
            var endDate = gantt.date.add(gantt.date.add(date, 1, "week"), -1, "day");
            return dateToStr(date) + " - " + dateToStr(endDate);
        };
        gantt.config.subscales = [
            { unit: "day", step: 1, date: "%d-%D" }
        ];
        gantt.config.scale_height = 50;
        //// configure milestone description
        //gantt.templates.rightside_text = function (start, end, task) {
        //    if (task.type == gantt.config.types.milestone) {
        //        return task.text;
        //    }
        //    return "";
        //};

        // Search function will loop owners to find label fow owner_id
        function getUser(user_id) {
            for (var i = 0; i < users.length; i++) {
                if (users[i].key == user_id) {
                    return users[i].label;
                }
            }
            return "";
        }

        //// Array of owners for options(in the lightbox)
        var users = [
        //  //{ key: '0', label: "" },
        //  //{ key: '1', label: "Ozzy Osbourne" },
        //  //{ key: '2', label: "Bonnie Tyler" },
        //  //{ key: '3', label: "Gene Pitney" },
        ];
        var ismilestone = [
          { key: 1, label: "Is Milestone?" }
        ];
        gantt.ajax.get("/Project/FillProjectMember?id=" + projectid, function (r) {
            var xml = r.xmlDoc.response;
            var user = JSON.parse(r.xmlDoc.response);
            for (var q = 0; q < user.items.length; q++) {
                users.push({
                    key: user.items[q]["key"],
                    label: user.items[q]["label"]
                });
            }
        });

        gantt.form_blocks.select.set_value = function (node, value, ev) {
            node.firstChild.value = value || "";
            if (ev.type == "Activity" || ev.parent == 0) {
                var style = ev.some_property ? "" : "none";
                node.style.display = style; // editor area
                node.previousSibling.style.display = style; //section header
                gantt.resizeLightbox(); //correct size of lightbox
            }
            else {
                var style = ev.some_property ? "" : "block";
                node.style.display = style; // editor area
                node.previousSibling.style.display = style; //section header
                gantt.resizeLightbox(); //correct size of lightbox
            }
        }

        gantt.form_blocks.checkbox.set_value = function (node, value, ev) {
            debugger;
            node.firstChild.checked = value || "";
            if (ev.type == "Activity" || ev.parent == 0) {
                var style = ev.some_property ? "" : "block";
                node.style.display = style; // editor area
                node.previousSibling.style.display = style; //section header
                node.checked = !!value;
                gantt.resizeLightbox(); //correct size of lightbox
            }
            else {
                var style = ev.some_property ? "" : "none";
                node.style.display = style; // editor area
                node.previousSibling.style.display = style; //section header
                gantt.resizeLightbox(); //correct size of lightbox
            }
        }

        //gantt.form_blocks.checkbox.get_value = function (node, ev) {
        //    debugger;
        //    if (ev.type == "Activity" || ev.parent == 0) {
        //        ev.checked = node.querySelector("[name='check1']").checked;
        //    }
        //}

        // add section to type selection: task, project or milestone
        gantt.config.lightbox.sections = [
            // Owners section, will map to owner_id
            { name: "users", height: 22, map_to: "user_id", type: "select", options: users },
            { name: "description", height: 70, map_to: "text", type: "textarea", focus: true },
            //{ name: "type", type: "typeselect", map_to: "type" },
            { name: "time", height: 30, type: "duration", map_to: "auto" },
            { name: "ismilestone", height: 30, map_to: "ismilestone", type: "checkbox" }
            //{
            //    name: "ismilestone", type: "checkbox", map_to: "render", options: [
            //{ key: "ismilestone", label: "" }
            //    ]
            //},
        //{name: "split", type:"checkbox", map_to: "render", options:opts}
        ];

        const formatter = gantt.ext.formatters.linkFormatter({
            //default values
            durationFormatter: gantt.ext.formatters.durationFormatter(),
            labels: {
                finish_to_start: "FS",
                start_to_start: "SS",
                finish_to_finish: "FF",
                start_to_finish: "SF"
            }
        });
        //var linksFormatter = gantt.ext.formatters.linkFormatter({ durationFormatter: formatter });
        var editors = {
            text: { type: "text", map_to: "text" },
            //taskid: { type: "text", map_to: "text" },
            start_date: {
                type: "date", map_to: "start_date"//,
                //min: new Date(2018, 0, 1), max: new Date(2019, 0, 1)
            },
            end_date: {
                type: "date", map_to: "end_date"//,
                //min: new Date(2018, 0, 1), max: new Date(2019, 0, 1)
            },
            duration: {
                type: "duration", map_to: "duration",
                min: 0, max: 100, formatter: formatter
            },
            predecessors: { type: "predecessor", map_to: "auto", formatter: formatter }
        };
        gantt.templates.grid_row_class = function (start, end, task) {
            if (task.$level > 1) {
                return "nested_task"
            }
            return "";
        };

        gantt.attachEvent("onBeforeLinkAdd", function (id, link) {
            if (!allow_link) return false;
            return true;
        });


        var allow_link = true;
        gantt.attachEvent("onMouseMove", function (id, e) {
            if (e.target.className == "gantt_task_content") allow_link = false;
            else allow_link = true;
        });

        gantt.attachEvent("onLightboxDelete", function (id) {
            debugger;
            const task = gantt.getTask(id);
            if (task.type == 'Activity') {
                if (task.text == 'Start Activity' || task.text == 'End Activity') {
                    alert("Cannot delete this task");
                    return false;
                }
            }
            return true;
        })
        gantt.config.columns = [
            { name: "wbs", label: "#", width: 40, align: "center", template: gantt.getWBSCode },
            { name: "text", label: "Name", tree: true, width: 200, resize: true },
            { name: "taskid", label: "id", width: 80, align: "center", resize: true },
            { name: "duration", label: "Duration", width: 80, align: "center", resize: true },
            { name: "start_date", label: "Start", width: 80, align: "center", resize: true },
            // Owners column
            {
                name: "user_id", label: "Owner", template: function (obj) {
                    return getUser(obj.user_id);
                }, align: "center", resize: true
            },
            { name: "end_date", label: "Finish", width: 80, align: "center", resize: true },
                {
                    name: "predecessors", label: "Predecessors", width: 80, align: "left",
                    //editor: editors.predecessors,
                    resize: true, template: function (task) {
                        var links = task.$target;
                        var labels = [];
                        for (var i = 0; i < links.length; i++) {
                            var link = gantt.getLink(links[i]);
                            labels.push(formatter.format(link));
                        }
                        return labels.join(", ")
                    }
                },
            { name: "add", label: "", width: 80, align: "center", resize: true }
        ];
        gantt.templates.task_end_date = function (date) {
            return gantt.templates.task_date(new Date(date.valueOf() - 1));
        };

        gantt.templates.progress_text = function (start, end, task) {
            return `<span style='text-align:left; padding-left: 5px;'>${Math.round(task.progress * 100)}%</span>`;
        };

        gantt.config.xml_date = "%Y-%m-%d %H:%i:%s"; // format of dates in XML
        gantt.config.duration_unit = "day";
        gantt.config.work_time = true;
        gantt.config.skip_off_time = true;
        gantt.config.fit_tasks = true;
        gantt.locale.labels.section_users = "Owner";
        gantt.locale.labels.section_ismilestone = "Is Milestone?";
        gantt.config.show_progress = true;
        gantt.config.show_loading = true;
        gantt.config.readonly = true
        gantt.init("ganttContainer"); // initialize gantt
        gantt.config.open_tree_initially = true;
        gantt.plugins({
            critical_path: true,
            auto_scheduling: true
        });
        gantt.config.highlight_critical_path = true;
        gantt.config.auto_scheduling = true;
        gantt.autoSchedule();
        router = function (entity, action, data, id) {
            return new gantt.Promise(function (resolve, reject) {
                gantt.load("/Project/GetchartData?projectid=" + projectid, "json");
            });
        }

        gantt.load("/Project/GetchartData?projectid=" + projectid, "json");

        gantt.attachEvent("onLightboxSave", function (id, item) {
            if (!item.text) {
                gantt.message({ type: "error", text: "Enter task description!" });
                return false;
            }
            return true;
        });

        gantt.templates.task_class = function (start, end, task) {
            if (gantt.hasChild(task.id)) {
                if (task.type == "Activity") return 'hide_progress_drag'
                else return "circle_task";
            }
            else {
                if (task.type == "SubTask" || task.type == "Task") return 'hide-link-point'
                else return "";
            };
        };

        gantt.attachEvent("onAfterLinkAdd", function (id, item) {
            window.location.reload();
        });
        gantt.attachEvent("onAfterLinkDelete", function (id, item) {
            window.location.reload();
        });
        gantt.attachEvent("onAfterTaskAdd", function (id, item) {
            window.location.reload();
        });
        gantt.attachEvent("onAfterTaskDelete", function (id, item) {
            window.location.reload();
        });
        gantt.attachEvent("onAfterTaskUpdate", function (id, item) {
            window.location.reload();
        });
        var dp = gantt.createDataProcessor(function (entity, action, data, id, taskid) {
            switch (entity) {
                case "task":
                    switch (action) {
                        case "create":
                            return gantt.ajax.post({
                                headers: {
                                    "Content-Type": "application/json"
                                },
                                url: "/Project/CreateTask",
                                data: JSON.stringify(data),
                                callback: function (response) {
                                }
                            });
                            break;
                        case "update":
                            return gantt.ajax.post({
                                headers: {
                                    "Content-Type": "application/json"
                                },
                                url: "/Project/UpdateTask",
                                data: JSON.stringify(data),
                                callback: function (response) {
                                }
                            });
                            gantt.message({ type: "error", text: result });
                            break;
                        case "delete":
                            return gantt.ajax.post({
                                headers: {
                                    "Content-Type": "application/json"
                                },
                                url: "/Project/DeleteChartTask",
                                data: JSON.stringify(data),
                                callback: function (response) {
                                }
                            });
                            gantt.message({ type: "error", text: result });
                            break;
                    }
                case "link":
                    switch (action) {
                        case "create":
                            return gantt.ajax.post({
                                headers: {
                                    "Content-Type": "application/json"
                                },
                                url: "/Project/CreateLink",
                                data: JSON.stringify(data),
                                callback: function (response) {
                                }
                            });
                            break;
                        case "update":
                            return gantt.ajax.post(
                                  "/Project/UpdateLink",
                                 data, entity, id
                             );
                            break;
                        case "delete":
                            return gantt.ajax.post({
                                url: "/Project/DeleteLink",
                                data: { id: id },
                                callback: function (response) {
                                }
                            });
                            break;
                    }
            }

        });
    })();
</script>
