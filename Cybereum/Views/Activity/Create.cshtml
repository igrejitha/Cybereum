@model Cybereum.Models.ProjectActivity

@{
    ViewBag.Title = "Add/Edit Activity";
}

<style type="text/css">
    .error {
        color: red;
        display: none;
    }

    #divLoader {
        position: fixed;
        display: block;
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
        text-align: center;
        opacity: 0.7;
        background-color: #fff;
        z-index: 99;
    }

    #loading-image {
<<<<<<< Updated upstream
<<<<<<< Updated upstream
<<<<<<< Updated upstream
  position: absolute;
  top: 50%;
  left: 50%;
  z-index: 100;
}
=======
=======
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
        position: absolute;
        top: 50%;
        left: 50%;
        z-index: 100;
    }
<<<<<<< Updated upstream
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
</style>

<div class="row">
    <div id="divLoader" style="display:none;">
        <img id="loading-image" src="~/images/Spinner.gif" alt="Loader" />
    </div>
    <div class="col-xl-12 col-lg-12">
        <div class="card">
            <div class="card-header">
                <h4 class="card-title">Add/Edit Activity</h4>
            </div>
            <div class="card-body">
                <div class="basic-form">
                    @using (Html.BeginForm("Create", "Activity", FormMethod.Post, new { enctype = "multipart/form-data" }))
                    {
                        @Html.AntiForgeryToken()

                        @*<div class="form-horizontal">
                            <hr />*@
                        <span class="text-danger" style="align-items:center;">
                            @ViewBag.Message
                            @Html.HiddenFor(model => model.id)
                            @Html.HiddenFor(model => model.projectid)
                            @*@Html.HiddenFor(model => model.createdby)*@
                            @Html.HiddenFor(model => model.createdon)
                            @Html.HiddenFor(model => model.Predecessors)
                        </span>
                        <div class="form-row">
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.activityname, "Activity Name", htmlAttributes: new { @class = "" })
                                @Html.EditorFor(model => model.activityname, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
                                @Html.ValidationMessageFor(model => model.activityname, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.startdate, "Start Date", htmlAttributes: new { @class = "" })
                                @if (Convert.ToBoolean(ViewBag.HasDate))
                                {
                                    @Html.TextBoxFor(model => model.startdate, new { @type = "date", @class = "form-control datepicker", @Value = Model.startdate.ToString("yyyy-MM-dd"), @disabled = "disabled" })
                                }
                                else
                                {
                                    @Html.TextBoxFor(model => model.startdate, new { @type = "date", @class = "form-control datepicker", @Value = Model.startdate.ToString("yyyy-MM-dd") })
                                }
                                @Html.ValidationMessageFor(model => model.startdate, "", new { @class = "text-danger" })

                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.durations, "Duration", htmlAttributes: new { @class = "" })

                                @Html.TextBoxFor(model => model.durations, new { @class = "form-control", autocomplete = "off" })
                                @Html.ValidationMessageFor(model => model.durations, "", new { @class = "text-danger" })

                            </div>
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.enddate, "End Date", htmlAttributes: new { @class = "" })

                                @Html.TextBoxFor(model => model.enddate, new { @type = "date", @class = "form-control datepicker", @Value = Model.enddate.ToString("yyyy-MM-dd") })
                                @Html.ValidationMessageFor(model => model.enddate, "", new { @class = "text-danger" })

                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.ismilestone, "Is Milestone?", htmlAttributes: new { @class = "" })

                                @Html.CheckBoxFor(model => model.ismilestone)

                            </div>
<<<<<<< Updated upstream
<<<<<<< Updated upstream
<<<<<<< Updated upstream
                            <div class="form-group col-md-6">                                
                                @Html.Label("Predecessors", htmlAttributes: new { @class = "" })
                                @*@Html.DropDownList("predecessors", null, htmlAttributes: new { @class = "form-control",multiple="multiple" })*@
                                <div style="height: 300px; overflow-y: scroll;">
=======
=======
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
                            <div class="form-group col-md-6">
                                @Html.Label("Predecessors", htmlAttributes: new { @class = "" })
                                @*@Html.DropDownList("predecessors", ViewBag.predecessors as SelectList, htmlAttributes: new { @class = "form-control", multiple = "multiple" })*@
                                @*<div style="height: 300px; overflow-y: scroll;">
<<<<<<< Updated upstream
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
                                    @if (ViewBag.predecessors != null)
                                    {
                                        foreach (var item in ViewBag.predecessors)
                                        {
<<<<<<< Updated upstream
<<<<<<< Updated upstream
<<<<<<< Updated upstream
                                            <input id="@item.Value" type="checkbox" name="predecessors" value="@item.Value" checked="@item.Selected" class="checkbox" onclick="Selectitem()" />
                                            <label for="@item.Value">
                                                @item.Text
                                            </label>
                                            <br />
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group col-md-6">
                                @Html.Label("Predecessors", htmlAttributes: new { @class = "" })
                                @Html.DropDownList("Predecessors", null, htmlAttributes: new { @class = "form-control" })
                                @*<div style="height: 300px; overflow-y: scroll;">
                                        @if (ViewBag.predecessors != null)
                                        {
                                            foreach (var item in ViewBag.predecessors)
                                            {
                                                <input id="@item.Value" type="checkbox" name="predecessors" value="@item.Value" checked="@item.Selected" class="checkbox" />
                                                <label for="@item.Value">
                                                    @item.Text
                                                </label>
                                                <br />
                                            }
                                        }
                                    </div>*@
=======
=======
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
                                            <input id="@item.Value" type="checkbox" name="Predecessors" value="@item.Value" checked="@item.Selected" class="checkbox" onclick="Selectitem()" />
                                            <label for="@item.Value">
                                                @item.Text
                                            </label>
                                                <br />
                                        }
                                    }
                                </div>*@                                
                                <div>
                                        <select id="mypredecessors" multiple="multiple" class="form-control" name="Predecessors" onchange="GetSelectedPredecessors()">
                                            @if (ViewBag.predecessors != null)
                                            {
                                                foreach (var item in ViewBag.predecessors)
                                                {
                                                    if (item.Text != null)
                                                    {
                                                        if (item.Selected == true)
                                                        {
                                                            <option id="@item.Value" value="@item.Value" selected="selected">
                                                                @item.Text
                                                            </option>
                                                        }
                                                        else
                                                        {
                                                            <option id="@item.Value" value="@item.Value">
                                                                @item.Text
                                                            </option>
                                                        }
                                                    }
                                                }
                                            }
                                        </select>
                                    </div>

<<<<<<< Updated upstream
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
                            </div>
                        </div>
                        <div class="form-group col-md-6">
                            @if (Convert.ToInt32(Session["RoleId"]) == 1)
                            {
                                <div class="form-group col-md-6">
                                    @Html.LabelFor(model => model.createdby, "Project Manager", htmlAttributes: new { @class = "" })
                                    @*<div class="col-md-10">*@
                                    @Html.DropDownList("createdby", null, htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.createdby, "", new { @class = "text-danger" })
                                    @*</div>*@
                                </div>
                            }
                            else
                            {
                                @Html.HiddenFor(model => model.createdby)
                            }
                        </div>
                        <div class="row" style="padding-top: 30px;">
                            <div class="col-6">
                                <h4>
                                    @Html.ActionLink("Back to List", "Index", new
<<<<<<< Updated upstream
<<<<<<< Updated upstream
<<<<<<< Updated upstream
                               {
                                   projectid = ViewBag.projectid
                               })
=======
                                       {
                                           projectid = ViewBag.projectid
                                       })
>>>>>>> Stashed changes
=======
                                       {
                                           projectid = ViewBag.projectid
                                       })
>>>>>>> Stashed changes
=======
                                       {
                                           projectid = ViewBag.projectid
                                       })
>>>>>>> Stashed changes
                                </h4>
                            </div>
                            <div class="col-6">
                                @*<button type="button" class="btn btn" style="background-color: #0D2136; color: white;" data-dismiss="modal" onclick="history.go(-1); return false;">Close</button>*@
                                <input type="submit" name="btnSubmit" value="Save" class="btn btn" style="background-color: #0D2136; color: white;" />
                            </div>

                        </div>
<<<<<<< Updated upstream
<<<<<<< Updated upstream
<<<<<<< Updated upstream
                        @*</div>*@
=======
                                @*</div>*@
>>>>>>> Stashed changes
=======
                                @*</div>*@
>>>>>>> Stashed changes
=======
                                @*</div>*@
>>>>>>> Stashed changes
                    }
                </div>
            </div>
        </div>
    </div>
</div>


@Scripts.Render("~/bundles/jquery")
<script type="text/javascript">
    $(document).ajaxSend(function () {
        //$("#overlay").fadeIn(300);
    });

    function Selectitem() {
        debugger;
        $("#divLoader").show();
        var $element = $(this);
        var id = $element.attr('id');
        var arr = [];
<<<<<<< Updated upstream
<<<<<<< Updated upstream
<<<<<<< Updated upstream
        $.each($("input[name='predecessors']:checked"), function () {
            arr.push($(this).val());
        });
        //$.getJSON("/Activity/GetPredecesdate",
        //        {
        //            id: arr
        //        },
        //        function (data) {
        //            debugger;
        //            var date = new Date(parseInt(data.substr(6)));
        //            var month = ("0" + (date.getMonth() + 1)).slice(-2);
        //            date = date.getFullYear() + '-' + month + '-' + ("0" + date.getDate()).slice(-2);
        //            $('#enddate').val(date);
        //        });
=======
        $.each($("input[name='Predecessors']:checked"), function () {
            arr.push($(this).val());
        });        
>>>>>>> Stashed changes
=======
        $.each($("input[name='Predecessors']:checked"), function () {
            arr.push($(this).val());
        });        
>>>>>>> Stashed changes
=======
        $.each($("input[name='Predecessors']:checked"), function () {
            arr.push($(this).val());
        });        
>>>>>>> Stashed changes
        $.ajax({
            url: '/Activity/GetPredecesdate',
            data: { id: arr },
            traditional: true,
            success: function (data) {
                debugger;
                $("#divLoader").hide();
                var date = new Date(parseInt(data.substr(6)));
                var month = ("0" + (date.getMonth() + 1)).slice(-2);
                date = date.getFullYear() + '-' + month + '-' + ("0" + date.getDate()).slice(-2);
                $('#startdate').val(date);
                $('#enddate').val(date);
            }
        });

    }
<<<<<<< Updated upstream
<<<<<<< Updated upstream
<<<<<<< Updated upstream
=======
=======
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes


    function GetSelectedPredecessors() {
        debugger;
        $("#divLoader").show();
        var arr = [];
        $("#mypredecessors option:selected").each(function () {
            arr.push($(this).val());
        });
        if (arr) {
            $.ajax({
                url: '/Activity/GetPredecesdate',
                data: { id: arr },
                traditional: true,
                success: function (data) {
                    debugger;
                    $("#divLoader").hide();
                    var date = new Date(parseInt(data.substr(6)));
                    var month = ("0" + (date.getMonth() + 1)).slice(-2);
                    date = date.getFullYear() + '-' + month + '-' + ("0" + date.getDate()).slice(-2);
                    $('#startdate').val(date);
                    $('#enddate').val(date);                    
                }
            });
        }
        else {
            $("#divLoader").hide();
            alert("Please select at least one predecessor");
        };
    }
<<<<<<< Updated upstream
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes

    $(document).ready(function () {
        debugger;

        $('#durations').change(function () {
            var recordId = this.value;
            var startdate = $("#startdate").val();
            $.getJSON("/Activity/GetEnddate",
                {
                    startDate: startdate,
                    id: recordId
                },
                function (data) {
                    debugger;
                    var date = new Date(parseInt(data.substr(6)));
                    var month = ("0" + (date.getMonth() + 1)).slice(-2);
                    date = date.getFullYear() + '-' + month + '-' + ("0" + date.getDate()).slice(-2);
                    $('#enddate').val(date);
                });
        });

        $(function () {
            //$("#startdate").datepicker();
            $("#startdate").on('change', function () {
                debugger;
                var startdate = $("#startdate").val();
                var date = $("#enddate").val();
                if (date != "") {
                    if (date < startdate) {
                        alert('End date must be greater than Start date');
                        $(this).val('');
                    }
                }
            });
        });


        $(function () {
            $("#enddate").on('change', function () {
                debugger;
                var date = $("#enddate").val();
                var startdate = $("#startdate").val();
                if (date != "") {
                    if (date < startdate) {
                        alert('End date must be greater than Start date');
                        $(this).val('');
                    }
                }
            });
        });

        $('#checkBoxAll').click(function () {
            if ($(this).is(":checked")) {
                $(".chkCheckBoxId").prop("checked", true)
            }
            else {
                $(".chkCheckBoxId").prop("checked", false)
            }
        });

    });
</script>
